from random import randint
import numpy as np
import findWeight2base
import shift

def find_pos_min(f1, f2):
    length = len(f1)
    f = [f2 for i in range(length)]
    diff = [abs(f1[i] - f[i]) for i in range(length)]
    return diff.index(min(diff))

def logisticFragment(yk, p):
    return p * yk * (1 - yk)

def logistic(y0, p):
    map = [y0]
    for i in range(255):
        yk = logisticFragment(map[len(map) - 1], p)
        map.append(yk)

    return map

def replace(Sbox):
    temp = Sbox
    for i in range(0, len(Sbox), 2):
        temp[i] = Sbox[i + 1]
        temp[i + 1] = Sbox[i]
    
    return temp

# box = [5, 0, 10, 122, 91, 161, 194, 101, 191, 103, 219, 244, 28, 145, 238, 188, 20, 30, 78, 25, 181, 214, 121, 111, 123, 239, 200, 131, 165, 242, 128, 32, 34, 82, 45, 40, 234, 77, 115, 137, 243, 220, 151, 79, 198, 148, 52, 185, 102, 49, 60, 54, 81, 71, 157, 254, 224, 171, 83, 199, 168, 8, 141, 218, 65, 75, 187, 70, 226, 3, 166, 152, 164, 24, 53, 252, 210, 47, 253, 93, 95, 143, 90, 85, 23, 186, 172, 246, 44, 9, 192, 184, 51, 193, 97, 230, 147, 110, 105, 99, 142, 176, 202, 43, 29, 212, 140, 48, 213, 117, 250, 7, 114, 125, 119, 167, 132, 222, 63, 146, 232, 144, 4, 33, 73, 206, 27, 233, 136, 248, 135, 130, 64, 231, 217, 35, 89, 118, 61, 229, 108, 62, 158, 19, 204, 155, 150, 156, 251, 237, 55, 84, 74, 1, 249, 109, 2, 162, 39, 112, 175, 170, 160, 208, 241, 11, 104, 207, 21, 205, 113, 94, 182, 59, 68, 22, 190, 180, 228, 179, 31, 124, 211, 197, 209, 69, 98, 41, 15, 88, 42, 138, 57, 196, 195, 201, 36, 26, 96, 129, 183, 126, 38, 154, 127, 223, 80, 173, 216, 215, 221, 13, 46, 116, 149, 56, 66, 58, 174, 139, 227, 100, 177, 67, 235, 225, 17, 236, 72, 169, 12, 50, 14, 178, 159, 86, 120, 133, 87, 247, 245, 37, 240, 255, 189, 16, 6, 92, 134, 163, 106, 18, 153, 107, 203, 76]
# box = [i for i in range(256)]

b = []

box = [
    124, 18, 154, 77, 3, 216, 99, 81, 117, 91, 112, 125, 88, 32, 10, 96, 227, 253, 141, 194,
    235, 5, 111, 9, 122, 37, 206, 233, 156, 72, 53, 51, 184, 7, 20, 239, 102, 22, 166, 210,
    192, 97, 226, 27, 12, 248, 79, 149, 69, 59, 196, 220, 132, 109, 94, 168, 234, 84, 15, 108,
    120, 52, 142, 14, 25, 90, 151, 205, 93, 0, 26, 171, 217, 41, 1, 67, 224, 197, 21, 198, 130,
    174, 231, 161, 199, 153, 76, 6, 144, 170, 246, 221, 43, 232, 29, 219, 61, 229, 191, 242, 195,
    95, 137, 225, 157, 75, 39, 119, 44, 98, 104, 87, 115, 89, 56, 110, 160, 42, 31, 249, 169,
    222, 146, 11, 245, 238, 136, 247, 54, 139, 200, 8, 36, 46, 126, 218, 121, 165, 105, 16, 58,
    35, 135, 164, 207, 230, 2, 243, 63, 123, 214, 80, 68, 55, 183, 114, 107, 208, 62, 163, 252,
    145, 116, 250, 13, 204, 127, 228, 187, 113, 49, 86, 159, 83, 152, 244, 180, 193, 57, 173,
    133, 128, 150, 30, 40, 190, 255, 240, 237, 155, 85, 175, 162, 47, 134, 50, 60, 28, 186, 177,
    33, 202, 176, 19, 70, 209, 24, 178, 71, 38, 212, 48, 201, 172, 129, 143, 215, 188, 181, 147,
    158, 65, 101, 100, 251, 179, 182, 203, 140, 223, 66, 254, 64, 23, 45, 189, 17, 213, 131, 4,
    73, 211, 167, 74, 78, 148, 236, 185, 92, 241, 82, 103, 118, 106, 34, 138
]

population = 50
step = 10000

for i in range(population):
    b.append(box)

x0 = 0.5
x1 = 0.6
k0 = 3.99234689
k1 = 3.99777777

for i in range(step):

    f1 = logistic(x0, k0)
    y = logistic(x1, k1)
    pos_min = find_pos_min(f1, y[155])

    for j in range (population - 1, population * 2 - 1):
       diff = j - population
       temp = b[diff]

       index =  (j - pos_min) % len(box)    
          
       old = temp[pos_min]
       new = temp[index]

       temp[index] = old
       temp[pos_min] = new

       b.append(temp)

       x1 = 0.9 * x1 + 0.1 * temp[pos_min]/255
       y = logistic(x1, k1)
       x0 = 0.9 * x0 + 0.1 * temp[pos_min]/255
       f1 = logistic(x0, k0)
       pos_min = find_pos_min(f1, y[154])

    #    b.append(shift.shift(temp, randint(0,255)))
    #    b.append(shift.shift(replace(b[diff]), 127 / (i + 1) ))

    D = []

    for j in range(population * 2 - 1):
        SAC2 = np.matrix(findWeight2base.calculateWeight(b[j - 1]).createFuns())
        summary = np.sum(np.abs(SAC2 - 128 * np.ones((8,8))))

        D.append(summary)
        if D[j] == 0:
            print(b[j])
    
    sorted_indices = np.argsort(D)

    for j in range(population - 1, population * 2 - 1):
        b[sorted_indices[j]] = []

    b.sort()

    for j in range(population):
        b.pop(0)

    print(i, min(D))


 
