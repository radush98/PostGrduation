import random
import nonlin
import chaotic

POP_SIZE = 10
TARGET = 112
TARGET_LENGTH = 256
GENES = [i for i in range(TARGET_LENGTH)]

def get_unique_in_order(seq):
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]

def initialize_pop():
    return [
        [5, 0, 10, 122, 91, 161, 194, 101, 191, 103, 219, 244, 28, 145, 238, 188, 20, 30, 78, 25, 181, 214, 121, 111, 123, 239, 200, 131, 165, 242, 128, 32, 34, 82, 45, 40, 234, 77, 115, 137, 243, 220, 151, 79, 198, 148, 52, 185, 102, 49, 60, 54, 81, 71, 157, 254, 224, 171, 83, 199, 168, 8, 141, 218, 65, 75, 187, 70, 226, 3, 166, 152, 164, 24, 53, 252, 210, 47, 253, 93, 95, 143, 90, 85, 23, 186, 172, 246, 44, 9, 192, 184, 51, 193, 97, 230, 147, 110, 105, 99, 142, 176, 202, 43, 29, 212, 140, 48, 213, 117, 250, 7, 114, 125, 119, 167, 132, 222, 63, 146, 232, 144, 4, 33, 73, 206, 27, 233, 136, 248, 135, 130, 64, 231, 217, 35, 89, 118, 61, 229, 108, 62, 158, 19, 204, 155, 150, 156, 251, 237, 55, 84, 74, 1, 249, 109, 2, 162, 39, 112, 175, 170, 160, 208, 241, 11, 104, 207, 21, 205, 113, 94, 182, 59, 68, 22, 190, 180, 228, 179, 31, 124, 211, 197, 209, 69, 98, 41, 15, 88, 42, 138, 57, 196, 195, 201, 36, 26, 96, 129, 183, 126, 38, 154, 127, 223, 80, 173, 216, 215, 221, 13, 46, 116, 149, 56, 66, 58, 174, 139, 227, 100, 177, 67, 235, 225, 17, 236, 72, 169, 12, 50, 14, 178, 159, 86, 120, 133, 87, 247, 245, 37, 240, 255, 189, 16, 6, 92, 134, 163, 106, 18, 153, 107, 203, 76],
        [10, 15, 6, 124, 88, 168, 205, 96, 187, 99, 209, 254, 22, 145, 229, 183, 28, 23, 77, 27, 185, 222, 113, 105, 112, 226, 207, 136, 162, 246, 132, 39, 36, 94, 40, 45, 239, 66, 122, 138, 243, 220, 153, 65, 199, 149, 52, 179, 111, 57, 62, 53, 83, 75, 155, 252, 237, 170, 82, 192, 166, 5, 128, 212, 67, 74, 176, 78, 236, 1, 164, 156, 167, 21, 50, 255, 213, 41, 251, 90, 91, 129, 95, 80, 18, 181, 173, 253, 38, 3, 204, 180, 58, 200, 107, 230, 146, 108, 97, 104, 134, 190, 206, 35, 16, 221, 133, 55, 217, 120, 247, 11, 125, 114, 121, 163, 143, 223, 48, 151, 238, 150, 4, 33, 73, 196, 24, 234, 142, 244, 130, 135, 69, 232, 208, 32, 89, 118, 51, 235, 109, 63, 158, 25, 197, 147, 148, 159, 249, 225, 49, 86, 71, 0, 248, 106, 12, 175, 42, 126, 160, 165, 172, 214, 242, 2, 103, 202, 17, 201, 123, 84, 188, 59, 79, 29, 182, 189, 231, 177, 19, 116, 219, 195, 218, 72, 101, 34, 8, 92, 46, 141, 56, 198, 203, 194, 44, 20, 100, 137, 186, 119, 47, 157, 115, 210, 93, 161, 215, 216, 211, 9, 37, 117, 154, 61, 68, 60, 174, 139, 227, 110, 178, 64, 233, 224, 26, 228, 70, 171, 14, 54, 13, 191, 152, 85, 127, 131, 81, 240, 241, 43, 245, 250, 184, 31, 7, 87, 140, 169, 102, 30, 144, 98, 193, 76],
        [5, 10, 16, 74, 97, 177, 226, 79, 165, 87, 219, 254, 60, 187, 212, 172, 30, 36, 94, 25, 133, 246, 83, 117, 107, 239, 194, 185, 143, 232, 176, 0, 56, 98, 45, 34, 202, 103, 73, 153, 243, 214, 141, 127, 252, 132, 20, 147, 118, 49, 54, 12, 123, 93, 173, 222, 234, 145, 67, 199, 152, 40, 167, 192, 75, 81, 139, 70, 242, 35, 140, 162, 148, 24, 63, 230, 248, 21, 237, 125, 101, 159, 90, 95, 55, 144, 182, 198, 44, 3, 250, 168, 41, 241, 65, 204, 163, 110, 99, 121, 164, 138, 218, 11, 23, 206, 188, 48, 197, 85, 208, 61, 114, 119, 77, 183, 158, 238, 31, 184, 210, 128, 4, 43, 105, 228, 1, 217, 146, 200, 135, 136, 96, 205, 227, 51, 89, 124, 39, 213, 86, 46, 190, 57, 220, 155, 156, 166, 209, 247, 7, 116, 64, 59, 233, 109, 50, 130, 13, 106, 175, 160, 186, 224, 203, 27, 72, 229, 15, 253, 113, 84, 150, 17, 126, 6, 180, 142, 244, 179, 47, 92, 249, 223, 193, 69, 104, 19, 37, 66, 26, 170, 9, 196, 201, 211, 14, 32, 112, 161, 189, 100, 22, 154, 111, 255, 122, 151, 216, 221, 231, 29, 52, 68, 181, 18, 120, 42, 174, 129, 195, 78, 171, 115, 225, 251, 33, 236, 88, 137, 38, 8, 62, 178, 149, 76, 82, 191, 71, 215, 207, 53, 240, 245, 157, 58, 28, 108, 134, 169, 80, 2, 131, 91, 235, 102],
        [10, 5, 26, 64, 97, 177, 239, 66, 167, 85, 222, 251, 59, 188, 220, 164, 25, 46, 84, 30, 133, 243, 86, 117, 105, 226, 207, 187, 128, 224, 184, 15, 50, 104, 34, 45, 199, 106, 73, 153, 246, 211, 143, 125, 244, 140, 19, 148, 124, 54, 49, 6, 126, 93, 173, 219, 231, 147, 65, 202, 144, 39, 168, 200, 70, 91, 129, 75, 242, 44, 131, 162, 150, 31, 56, 228, 253, 29, 229, 120, 111, 149, 95, 90, 48, 151, 182, 198, 35, 12, 248, 170, 33, 249, 76, 193, 169, 99, 110, 115, 171, 138, 218, 4, 16, 204, 190, 55, 205, 80, 213, 53, 119, 114, 71, 189, 158, 238, 24, 191, 208, 130, 11, 36, 100, 233, 9, 209, 152, 194, 136, 135, 109, 192, 227, 51, 92, 121, 37, 215, 94, 38, 185, 62, 214, 156, 155, 172, 212, 247, 7, 113, 77, 57, 235, 96, 58, 141, 2, 98, 160, 175, 176, 234, 203, 27, 69, 232, 13, 255, 116, 81, 145, 22, 118, 14, 179, 132, 254, 180, 47, 89, 252, 223, 195, 72, 101, 17, 42, 74, 18, 165, 3, 201, 196, 217, 1, 32, 112, 174, 186, 102, 20, 157, 103, 250, 127, 159, 221, 216, 237, 23, 52, 68, 178, 21, 122, 40, 161, 142, 206, 67, 163, 123, 236, 241, 43, 225, 88, 134, 41, 8, 60, 181, 146, 78, 87, 183, 79, 210, 197, 63, 245, 240, 154, 61, 28, 108, 137, 166, 82, 0, 139, 83, 230, 107],
        [15, 10, 31, 69, 102, 182, 224, 71, 168, 90, 211, 252, 60, 177, 209, 169, 30, 35, 89, 19, 138, 244, 91, 122, 110, 231, 192, 188, 133, 229, 189, 0, 55, 109, 39, 34, 200, 111, 78, 158, 251, 212, 128, 114, 249, 129, 20, 153, 113, 59, 54, 11, 115, 82, 162, 220, 232, 148, 70, 207, 149, 40, 173, 205, 75, 92, 134, 76, 247, 33, 132, 167, 155, 16, 61, 233, 242, 18, 234, 125, 96, 154, 80, 95, 53, 152, 187, 203, 36, 1, 253, 175, 38, 254, 65, 198, 174, 100, 99, 116, 172, 143, 223, 9, 21, 193, 179, 56, 194, 85, 218, 58, 120, 119, 72, 178, 147, 227, 29, 176, 213, 135, 12, 41, 105, 238, 14, 214, 157, 199, 141, 136, 98, 197, 228, 52, 81, 126, 42, 216, 83, 43, 190, 51, 219, 145, 156, 161, 217, 248, 8, 118, 66, 62, 236, 101, 63, 130, 7, 103, 165, 160, 181, 239, 204, 28, 74, 237, 2, 240, 121, 86, 150, 27, 123, 3, 180, 137, 243, 185, 32, 94, 241, 208, 196, 77, 106, 22, 47, 79, 23, 170, 4, 206, 201, 222, 6, 37, 117, 163, 191, 107, 25, 146, 104, 255, 112, 144, 210, 221, 226, 24, 57, 73, 183, 26, 127, 45, 166, 131, 195, 68, 164, 124, 225, 246, 44, 230, 93, 139, 46, 13, 49, 186, 151, 67, 88, 184, 64, 215, 202, 48, 250, 245, 159, 50, 17, 97, 142, 171, 87, 5, 140, 84, 235, 108],
        [5, 0, 22, 108, 109, 157, 200, 111, 129, 83, 251, 212, 54, 187, 250, 162, 20, 42, 112, 25, 161, 220, 115, 113, 103, 207, 232, 149, 143, 206, 182, 10, 62, 68, 45, 40, 224, 71, 69, 181, 211, 252, 169, 123, 210, 138, 30, 147, 88, 49, 60, 2, 91, 89, 137, 244, 192, 189, 79, 231, 158, 34, 167, 230, 65, 87, 173, 70, 222, 9, 172, 174, 144, 56, 21, 194, 248, 59, 227, 119, 107, 177, 90, 85, 29, 176, 178, 226, 12, 41, 214, 164, 15, 247, 75, 204, 133, 110, 105, 127, 132, 134, 246, 33, 61, 234, 184, 16, 203, 95, 208, 19, 114, 125, 67, 153, 154, 202, 53, 152, 254, 140, 36, 1, 99, 228, 39, 223, 148, 238, 135, 130, 74, 237, 239, 31, 121, 86, 3, 209, 120, 32, 180, 57, 242, 155, 150, 168, 241, 243, 35, 94, 106, 23, 229, 77, 52, 136, 13, 76, 175, 170, 188, 198, 199, 55, 98, 197, 43, 249, 81, 126, 156, 17, 80, 8, 190, 128, 218, 179, 11, 118, 217, 219, 205, 101, 66, 63, 37, 100, 28, 160, 47, 196, 195, 213, 46, 44, 92, 139, 151, 64, 18, 186, 97, 245, 122, 185, 216, 215, 233, 51, 48, 96, 159, 50, 84, 38, 142, 171, 201, 78, 141, 117, 235, 253, 7, 236, 116, 163, 6, 4, 58, 146, 191, 104, 82, 145, 73, 221, 193, 27, 240, 255, 183, 26, 24, 72, 166, 131, 124, 14, 165, 93, 225, 102],
        [0, 5, 47, 87, 94, 172, 239, 72, 146, 66, 214, 249, 57, 180, 227, 185, 25, 51, 107, 20, 176, 243, 92, 98, 86, 234, 205, 166, 136, 247, 141, 13, 7, 127, 40, 45, 199, 96, 118, 132, 254, 209, 186, 106, 203, 145, 17, 156, 67, 60, 49, 27, 116, 74, 152, 219, 229, 142, 126, 194, 165, 37, 160, 223, 70, 108, 148, 65, 237, 44, 137, 159, 131, 23, 58, 211, 245, 32, 250, 122, 112, 168, 85, 90, 48, 157, 163, 241, 43, 14, 231, 151, 52, 206, 78, 201, 188, 105, 110, 68, 161, 183, 197, 4, 18, 251, 171, 63, 210, 82, 221, 8, 125, 114, 88, 128, 139, 217, 24, 181, 207, 191, 3, 38, 102, 225, 28, 230, 173, 213, 130, 135, 109, 202, 220, 46, 84, 123, 16, 192, 97, 59, 187, 54, 233, 150, 155, 177, 222, 224, 50, 113, 79, 36, 212, 104, 15, 143, 10, 117, 170, 175, 133, 253, 244, 6, 69, 226, 56, 232, 124, 83, 147, 30, 73, 19, 179, 153, 193, 190, 26, 89, 246, 200, 252, 64, 103, 12, 34, 93, 39, 167, 22, 195, 196, 238, 11, 29, 111, 174, 184, 81, 1, 149, 120, 248, 119, 162, 215, 216, 242, 42, 33, 115, 178, 31, 101, 21, 169, 140, 204, 75, 182, 76, 236, 198, 62, 235, 71, 134, 35, 53, 41, 189, 144, 121, 95, 138, 80, 208, 218, 2, 255, 240, 154, 55, 9, 91, 129, 164, 77, 61, 158, 100, 228, 99],
        [0, 15, 47, 95, 81, 171, 229, 66, 152, 74, 209, 244, 52, 185, 230, 190, 28, 60, 108, 17, 184, 246, 83, 98, 91, 226, 197, 169, 138, 247, 143, 5, 13, 125, 34, 45, 199, 96, 115, 137, 243, 214, 186, 104, 196, 156, 22, 155, 78, 51, 62, 30, 113, 64, 154, 212, 231, 139, 121, 192, 173, 39, 168, 213, 67, 99, 147, 68, 239, 41, 134, 149, 142, 21, 56, 220, 253, 42, 242, 120, 112, 160, 85, 80, 58, 151, 166, 252, 38, 9, 237, 159, 59, 195, 73, 206, 177, 102, 97, 65, 164, 183, 205, 11, 26, 254, 172, 55, 208, 90, 223, 8, 119, 114, 82, 130, 132, 222, 24, 181, 207, 189, 4, 43, 107, 236, 25, 225, 167, 215, 136, 135, 109, 202, 217, 35, 89, 124, 16, 194, 110, 54, 188, 49, 228, 153, 148, 180, 219, 234, 48, 126, 77, 33, 211, 106, 7, 141, 2, 127, 170, 165, 133, 245, 251, 1, 79, 232, 50, 224, 123, 94, 158, 19, 76, 20, 182, 150, 198, 187, 18, 92, 249, 200, 241, 72, 111, 3, 32, 93, 37, 175, 27, 204, 203, 235, 14, 29, 103, 161, 176, 84, 6, 157, 122, 240, 117, 162, 221, 216, 248, 40, 46, 116, 178, 31, 101, 23, 174, 129, 193, 70, 179, 75, 233, 201, 57, 238, 69, 131, 44, 63, 36, 191, 146, 118, 87, 128, 88, 210, 218, 10, 255, 250, 144, 61, 12, 86, 140, 163, 71, 53, 145, 105, 227, 100],
        [5, 0, 58, 106, 107, 177, 194, 101, 143, 119, 219, 244, 28, 145, 222, 172, 20, 14, 126, 25, 133, 214, 121, 127, 75, 239, 200, 147, 165, 226, 176, 32, 18, 66, 45, 40, 234, 77, 67, 153, 243, 220, 167, 95, 246, 132, 52, 185, 86, 49, 60, 38, 81, 87, 173, 254, 224, 187, 99, 199, 152, 8, 141, 202, 65, 123, 171, 70, 242, 3, 166, 168, 180, 24, 53, 204, 210, 31, 237, 93, 79, 191, 90, 85, 23, 186, 188, 198, 44, 9, 208, 136, 35, 241, 97, 230, 131, 110, 105, 83, 142, 128, 218, 43, 29, 228, 156, 48, 197, 117, 250, 55, 114, 125, 103, 151, 148, 238, 63, 146, 248, 160, 4, 33, 73, 206, 11, 217, 184, 232, 135, 130, 64, 231, 233, 51, 89, 118, 13, 245, 92, 46, 158, 19, 252, 155, 150, 140, 251, 253, 7, 84, 74, 17, 201, 109, 50, 162, 39, 96, 175, 170, 144, 192, 193, 27, 104, 207, 37, 221, 113, 94, 182, 59, 116, 6, 190, 164, 212, 179, 47, 124, 211, 213, 225, 69, 98, 57, 15, 72, 26, 138, 41, 196, 195, 249, 36, 42, 112, 129, 183, 78, 54, 154, 111, 223, 80, 157, 216, 215, 205, 61, 62, 68, 149, 56, 82, 10, 174, 139, 227, 100, 161, 115, 235, 209, 1, 236, 88, 169, 12, 2, 30, 178, 159, 102, 120, 181, 71, 247, 229, 21, 240, 255, 189, 16, 22, 108, 134, 163, 122, 34, 137, 91, 203, 76],
        [0, 26, 11, 76, 124, 153, 209, 97, 183, 122, 231, 213, 54, 174, 192, 175, 46, 31, 80, 20, 173, 229, 117, 64, 78, 251, 233, 139, 178, 212, 179, 10, 35, 100, 40, 50, 249, 73, 84, 177, 207, 253, 159, 82, 232, 135, 30, 134, 120, 60, 6, 55, 93, 104, 133, 205, 193, 163, 102, 211, 155, 34, 154, 252, 91, 72, 141, 65, 218, 18, 162, 189, 187, 36, 22, 244, 239, 1, 236, 119, 92, 145, 85, 111, 38, 182, 129, 238, 56, 42, 200, 143, 21, 240, 75, 243, 165, 105, 115, 96, 138, 149, 242, 58, 62, 220, 147, 12, 196, 95, 199, 41, 125, 71, 116, 185, 169, 198, 14, 158, 224, 167, 16, 2, 99, 219, 61, 216, 137, 206, 130, 152, 83, 227, 254, 27, 101, 87, 53, 248, 66, 45, 180, 44, 210, 150, 172, 157, 247, 194, 47, 103, 107, 9, 204, 121, 49, 136, 48, 86, 170, 176, 161, 230, 214, 51, 123, 203, 29, 208, 77, 127, 156, 4, 106, 5, 132, 181, 250, 190, 7, 79, 223, 234, 228, 81, 67, 33, 24, 126, 25, 160, 15, 195, 217, 202, 32, 63, 88, 144, 148, 118, 57, 166, 110, 245, 109, 131, 215, 237, 222, 19, 3, 108, 164, 52, 74, 13, 186, 168, 201, 113, 151, 114, 241, 226, 39, 235, 112, 184, 8, 23, 17, 142, 188, 94, 69, 171, 70, 221, 246, 59, 255, 197, 140, 28, 43, 68, 146, 128, 98, 37, 191, 90, 225, 89]
    ]
    # population = list()

    # for i in range(POP_SIZE):
    #     left_elements = GENES.copy()
    #     temp = list()

    #     for j in range(TARGET_LENGTH):
    #         temp.append(random.choice(left_elements))
    #         index = left_elements.index(temp[j])
    #         left_elements.pop(index)
        
    #     population.append(temp)

    # return population

def crossover(selected_chromo, population):
    offspring_cross = []
    for i in range(int(POP_SIZE)):
        parent1 = random.choice(selected_chromo)
        parent2 = random.choice(population[:int(POP_SIZE*50)])

        genes_mix = [element for pair in zip(parent1[0], parent2[0]) for element in pair]
        child = get_unique_in_order(genes_mix)
        offspring_cross.extend([child])
    return offspring_cross 

def mutate(offspring):
    mutated_offspring = []

    for arr in offspring:
        chaos = chaotic.chaotic(arr)
        mutated_offspring.append(chaos.calcChaotic())
        # random.shuffle(arr)
        # mutated_offspring.append(arr)
    return mutated_offspring

def selection(population):
    sorted_chromo_pop = sorted(population, key= lambda x: x[1])
    return sorted_chromo_pop[:int(0.5*POP_SIZE)]

def fitness_cal(TARGET, chromo_from_pop):
    difference = TARGET - min(nonlin.calculateSbox(chromo_from_pop))
    return [chromo_from_pop, difference]

def replace(new_gen, population):
    for _ in range(len(population)):
        if population[_][1] > new_gen[_][1]:
          population[_][0] = new_gen[_][0]
          population[_][1] = new_gen[_][1]
    return population

def main(POP_SIZE, TARGET, GENES):
    # 1) initialize population
    initial_population = initialize_pop()
    found = False
    population = []
    generation = 1

    # 2) Calculating the fitness for the current population
    for _ in range(len(initial_population)):
        population.append(fitness_cal(TARGET, initial_population[_]))

    # now population has 2 things, [chromosome, fitness]
    # 3) now we loop until TARGET is found
    while not found:
        # 3.1) select best people from current population
        selected = selection(population)

        # 3.2) mate parents to make new generation
        population = sorted(population, key= lambda x:x[1])
        crossovered = crossover(selected, population)
            
        # 3.3) mutating the childeren to diversfy the new generation
        mutated = mutate(crossovered)

        new_gen = []
        for _ in mutated:
            new_gen.append(fitness_cal(TARGET, _))

        # 3.4) replacement of bad population with new generation
        # we sort here first to compare the least fit population with the most fit new_gen
    
        population = replace(new_gen, population)
    
        if (population[0][1] == 0):
            print('Target found')
            print('S-box: ' + str(population[0][0]) + ' Generation: ' + str(generation) + ' Fitness: ' + str(population[0][1]))
            break
        print('S-box: ' + str(population[0][0]) + ' Generation: ' + str(generation) + ' Fitness: ' + str(population[0][1]))
        generation+=1

main(POP_SIZE, TARGET, GENES)