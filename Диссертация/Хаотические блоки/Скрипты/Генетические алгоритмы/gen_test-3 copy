import numpy as np
import summary_class
import inversive
import nonlin

Ai = inversive.inversive([5, 0, 10, 122, 91, 161, 194, 101, 191, 103, 219, 244, 28, 145, 238, 188, 20, 30, 78, 25, 181, 214, 121, 111, 123, 239, 200, 131, 165, 242, 128, 32, 34, 82, 45, 40, 234, 77, 115, 137, 243, 220, 151, 79, 198, 148, 52, 185, 102, 49, 60, 54, 81, 71, 157, 254, 224, 171, 83, 199, 168, 8, 141, 218, 65, 75, 187, 70, 226, 3, 166, 152, 164, 24, 53, 252, 210, 47, 253, 93, 95, 143, 90, 85, 23, 186, 172, 246, 44, 9, 192, 184, 51, 193, 97, 230, 147, 110, 105, 99, 142, 176, 202, 43, 29, 212, 140, 48, 213, 117, 250, 7, 114, 125, 119, 167, 132, 222, 63, 146, 232, 144, 4, 33, 73, 206, 27, 233, 136, 248, 135, 130, 64, 231, 217, 35, 89, 118, 61, 229, 108, 62, 158, 19, 204, 155, 150, 156, 251, 237, 55, 84, 74, 1, 249, 109, 2, 162, 39, 112, 175, 170, 160, 208, 241, 11, 104, 207, 21, 205, 113, 94, 182, 59, 68, 22, 190, 180, 228, 179, 31, 124, 211, 197, 209, 69, 98, 41, 15, 88, 42, 138, 57, 196, 195, 201, 36, 26, 96, 129, 183, 126, 38, 154, 127, 223, 80, 173, 216, 215, 221, 13, 46, 116, 149, 56, 66, 58, 174, 139, 227, 100, 177, 67, 235, 225, 17, 236, 72, 169, 12, 50, 14, 178, 159, 86, 120, 133, 87, 247, 245, 37, 240, 255, 189, 16, 6, 92, 134, 163, 106, 18, 153, 107, 203, 76])

def generateKey(w0, x0, y0, z0, uw, ux, uy, uz): #∀ ∈ [0, 1], #∀ ∈ [3.57, 4]
    wn, xn, yn, zn = w0, x0, y0, z0
    for n in range(256):
        wn1 = uw*wn*(1-wn)
        xn1 = ux*xn*(1-xn)
        yn1 = uy*yn*(1-yn)
        zn1 = uz*zn*(1-zn)
        
        wn, xn, yn, zn = wn1, xn1, yn1, zn1
    t = wn1 + xn1 + yn1 + zn1
    k = int(abs(t) * 10**4) % 256
    k_binary = format(k, '08b')
    
    return [k, k_binary]  

def generateAffineMatrix(k_binary):
    Rk = np.zeros([8,8])
    Rk[0, :] = [int(i) for i in k_binary]
    
    for m in range(2, 9):
        Rk[m-1, :] = np.roll(Rk[m-2, :], 1)
        
    det = np.linalg.det(Rk)
        
    # if det % 2 != 0:
    return Rk
    
    #In other case return to the key generation

def generate_sbox(Rk_matrix):
    sbox = []
    for index in range(0, 256):
        col_vector = np.zeros([8, 1])
        bin_code = format(Ai[index], '08b')
        col_vector[:, 0] = [int(i) for i in bin_code]
        
        Si = np.dot(Rk_matrix, col_vector) % 2
        createdBinCode = ''.join([str(int(i[0])) for i in Si])
        sbox.append(int(createdBinCode, 2))
    return sbox
   
# [k, k_binary] = generateKey(0.5, 0.6, 0.8, 0.7, 3.95, 3.58, 3.92, 3.66); 

# rotationMatrix = generateAffineMatrix(format(k_binary, '08b'))
for i in range(1, 256):
    rotationMatrix = generateAffineMatrix(format(i, '08b'))
    # print(rotationMatrix)
    if (rotationMatrix is not None):
        sbox = generate_sbox(rotationMatrix)
        if (len(set(sbox))) == 256:
            print(min(nonlin.calculateSbox(sbox)))
            # summary_class.Summary(sbox)
 


    
    